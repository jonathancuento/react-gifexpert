{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","original","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"iLAIaA,EAAc,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,cAAiB,EACNC,mBAAS,cADH,mBACnCC,EADmC,KACvBC,EADuB,KAY1C,OACI,uBAAMC,SANW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,GAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,QAG1C,UACI,6BAAKP,IACL,uBACIQ,KAAK,OACLC,MAAST,EACTU,SAfc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,c,+BCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,0FAC4EC,UAAUH,GADtF,sBAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACvB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,SAASZ,QARf,kBAYZM,GAZY,4CAAH,sDCCPO,EAAc,SAAC,GAAgB,IAAfH,EAAc,EAAdA,MAAOV,EAAO,EAAPA,IAEhC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,kCAAKA,SCFJO,EAAU,SAAC,GAAc,IAAbnB,EAAY,EAAZA,SAAY,ECFT,SAAEA,GAAa,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAkBtC,OAZAC,qBAAW,WACPxB,EAASC,GAAUwB,MAAK,SAAAC,GACpBH,EACI,CACIf,KAAMkB,EACNL,SAAS,SAKtB,CAAEpB,IAEEqB,EDdwBK,CAAc1B,GAAjCa,EAFqB,EAE1BN,KAAaa,EAFa,EAEbA,QAEpB,OACI,qCACA,6BAAKpB,IACJoB,GAAS,4CACV,qBAAKJ,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEbpBgB,EAAe,WAAO,IAAD,EAEMzC,mBAAS,CAAC,cAFhB,mBAEvB0C,EAFuB,KAEX3C,EAFW,KAQ9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCfjC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.06351899.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nexport const AddCategory = ({setCategories})=>{\r\n    const [inputValue, setInputValue] = useState(\"Hola mundo\");\r\n\r\n    const handleInputChange = (e) =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2)\r\n            setCategories(cats => [inputValue, ...cats])\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h2>{inputValue}</h2>\r\n            <input \r\n                type=\"text\"\r\n                value = {inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\nexport const getGifs = async( category ) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=htnSn983UfeyFF6IfHC33H6XSnXa5wiT&q=${encodeURI(category)}&limit=10`;\r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json();   \r\n    const gifs = data.map(img=>{\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.original.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n}\r\n","import React from \"react\";\r\n\r\nexport const GifGridItem = ({title, url})=>{\r\n\r\n    return(\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p> {title}</p>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n// import { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const GifGrid = ({category})=>{\r\n\r\n    const {data:images, loading} = useFetchGifs( category);\r\n\r\n    return(\r\n        <>\r\n        <h3>{category}</h3>\r\n        {loading&&<h3>Loading...</h3>}\r\n        <div className=\"card-grid\">\r\n            {\r\n                images.map(img=>(\r\n                    <GifGridItem \r\n                        key={img.id}\r\n                        {...img}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n        </>\r\n    );\r\n\r\n}","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category )=>{\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( ()=>{\r\n        getGifs( category).then(imgs=>{\r\n            setState(\r\n                {\r\n                    data: imgs,\r\n                    loading: false\r\n                }\r\n            )\r\n            \r\n        })\r\n    }, [ category ])\r\n\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = ()=>{\r\n    //     setCategories([...categories, \"Nuevo\"]);\r\n    // }\r\n\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    categories.map( category =>(\r\n                        <GifGrid \r\n                            key={category} \r\n                            category={category} \r\n                        /> ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}